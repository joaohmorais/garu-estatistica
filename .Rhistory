runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?updateActionButton
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?conditionalPanel
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
p("A média é legal", id = "mediaTexto")
library(shinyjs)
install.packages("shinyjs")
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?withMathJax
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
library(knitr)
?knit
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
library(tikzDevice)
install.packages("tikzDevice")
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?tikz
runApp('Documents/BIG/v2')
library(latex2exp)
install.packages("latex2exp")
library(latex2exp)
TeX('$\\alpha^\\beta$')
x <- seq(0, 4, length.out=100)
alpha <- 1:5
plot(x, xlim=c(0, 4), ylim=c(0, 10),
xlab='x', ylab=TeX('$\\alpha  x^\\alpha$, where $\\alpha \\in 1\\ldots 5$'),
type='n', main=TeX('Using $\\LaTeX$ for plotting in base graphics!'))
plot(x, xlim=c(0, 4), ylim=c(0, 10),
xlab='x', ylab=TeX('$\\alpha  x^\\alpha$, where $\\alpha \\in 1\\ldots 5$'),
type='n', main=TeX('Using $\\LaTeX$ for plotting in base graphics!'))
plot(x, xlim=c(0, 4), ylim=c(0, 10),
xlab='x', ylab=TeX('$\\alpha  x^\\alpha$, where $\\alpha \\in 1\\ldots 5$'),
type='n', main=TeX('Using $\\LaTeX$ for plotting in base graphics!'))
x <- seq(0, 4, length.out=100)
alpha <- 1:5
plot(x, xlim=c(0, 4), ylim=c(0, 10),
xlab='x', ylab=TeX('$\\alpha  x^\\alpha$, where $\\alpha \\in 1\\ldots 5$'),
type='n', main=TeX('Using $\\LaTeX$ for plotting in base graphics!'))
invisible(sapply(alpha, function(a) lines(x, a*x^a, col=a)))
legend('topleft', legend=TeX(sprintf("$\\alpha = %d$", alpha)),
lwd=1, col=alpha)
x <- seq(0, 4, length.out=100)
alpha <- 1:5
plot(x, xlim=c(0, 4), ylim=c(0, 10),
xlab='x', ylab=TeX('$\\alpha  x^\\alpha$, where $\\alpha \\in 1\\ldots 5$'),
type='n', main=TeX('Using $\\LaTeX$ for plotting in base graphics!'))
invisible(sapply(alpha, function(a) lines(x, a*x^a, col=a)))
legend('topleft', legend=TeX(sprintf("$\\alpha = %d$", alpha)),
lwd=1, col=alpha)
plot(x, xlim=c(0, 4), ylim=c(0, 10))
plot(x, xlim=c(0, 4), ylim=c(0, 10))
x <- seq(0, 4, length.out=100)
alpha <- 1:5
plot(x, xlim=c(0, 4), ylim=c(0, 10),
xlab='x', ylab=TeX('$\\alpha  x^\\alpha$, where $\\alpha \\in 1\\ldots 5$'),
type='n', main=TeX('Using $\\LaTeX$ for plotting in base graphics!'))
invisible(sapply(alpha, function(a) lines(x, a*x^a, col=a)))
legend('topleft', legend=TeX(sprintf("$\\alpha = %d$", alpha)),
lwd=1, col=alpha)
library(latex2exp)
x <- seq(0, 4, length.out=100)
alpha <- 1:5
plot(x, xlim=c(0, 4), ylim=c(0, 10),
xlab='x', ylab=TeX('$\\alpha  x^\\alpha$, where $\\alpha \\in 1\\ldots 5$'),
type='n', main=TeX('Using $\\LaTeX$ for plotting in base graphics!'))
invisible(sapply(alpha, function(a) lines(x, a*x^a, col=a)))
legend('topleft', legend=TeX(sprintf("$\\alpha = %d$", alpha)),
lwd=1, col=alpha)
shiny::runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
shiny::runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?verbatimTextOutput
runApp('Documents/BIG/v2')
withMathJax(helpText("Média:  $$\\frac{1}{n} \\sum_{i=1}^{n} x_{i}$$"))
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
h4("media")
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
data <- read.csv("data/food-choices/clean_data.csv")[,-1]
colnames(data) <- gsub(".", ' ',colnames(data), fixed = TRUE)
example_dataframe <- as.data.frame(rbind(
c("Sexo", "'Masculino', 'Feminino'", "Qualitativa Nominal"),
c("Ano letivo", "1, 2, 3, 4...", "Quantitativa Discreta"),
c("Peso", "61.2, 85, 119.3", "Quantitativa Contínua"),
c("Trabalho", "'Tempo Integral', 'Meio Período', 'Não trabalha'", "Qualitativa Ordinal"),
c("Relacionamento", "'Solteirx', 'Em um relacionamento', 'Morando junto', ...", "Qualitativa Nominal"),
c("Cozinha", "'Sempre', 'Quase todo dia', 'Nunca', ...", "Qualitativa Ordinal"),
c("Come Fora", "'Sempre', 'Quase todo dia', 'Nunca'", "Qualitativa Ordinal"),
c("Culinária Favorita", "'Árabe', 'Oriental', 'Africana', ...", "Qualitativa Nominal"),
c("Pratica exercícios", "'Sempre', 'Quase todo dia', 'Nunca'", "Qualitativa Ordinal"),
c("Pratica esportes", "'Sim', 'Não'", "Qualitativa Nominal"),
c("Toma Vitamina", "'Sim', 'Não'", "Qualitativa Nominal")
))
colnames(example_dataframe) <- c("Variável", "Possíveis Valores", "Tipo de Variável")
tab_frequencia_relacionamento <- as.data.frame(table(data$Relacionamento))
tab_frequencia_relacionamento$prop <- round(tab_frequencia_relacionamento$Freq/sum(tab_frequencia_relacionamento$Freq), digits = 4)
tab_frequencia_relacionamento$porc <- scales::percent(tab_frequencia_relacionamento$prop)
colnames(tab_frequencia_relacionamento) <- c("Relacionamento", "Frequência", "Proporção", "Porcentagem")
freq_peso <- cut(data$Peso, breaks = c(45, 60, 75, 90, 105, 120))
tab_frequencia_peso <- as.data.frame(with(data, table(freq_peso, useNA = 'ifany')))
tab_frequencia_peso$prop <- round(tab_frequencia_peso$Freq/sum(tab_frequencia_peso$Freq), digits = 4)
tab_frequencia_peso$porc<- scales::percent(tab_frequencia_peso$prop)
colnames(tab_frequencia_peso) <- c("Faixa de peso", "Frequência", "Proporção", "Porcentagem")
as.data.frame(table(data$`Ano letivo`))
tab_frequencia_ano_letivo <- as.data.frame(table(data$`Ano letivo`))
tab_frequencia_ano_letivo$prop <- round(tab_frequencia_ano_letivo$Freq/sum(tab_frequencia_ano_letivo$Freq), digits = 4)
tab_frequencia_ano_letivo$porc <- scales::percent(tab_frequencia_ano_letivo$prop)
colnames(tab_frequencia_ano_letivo) <- c("Ano Letivo", "Frequência", "Proporção", "Porcentagem")
tab_frequencia_ano_letivo
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
p("Em alguns casos medidas como média, moda e mediana podem não nos trazer
informações suficientes sobre o conjunto de observações. Afinal,
as medidas anteriores são medidas de posição. É interessente
analisarmos medidas de dispersão, como a variância. Esta representa
o quão desviados os dados estão de sua média. Para isso, precisamos
calcular a distância de cada elemento e a média, somar o quadrado dessas
distâncias e dividir pelo número de observação. ", id = "medianaTexto")
var(elementos)
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
hidden(p("oi"))
hidden(p("oi", id = "par"))
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
output$graficoElementos <- renderPlot({
input$geraElementos
tab <- as.data.frame(table(elementos))
tab$elementos <- as.numeric(as.character(tab$elementos))
mean <- round(mean(elementos), 2)
mode <- getmode(elementos)
tab$isMode <- ifelse(tab$elementos %in% mode, TRUE, FALSE)
ggplot(data=tab, aes(x=elementos, y=Freq, fill = isMode)) +
geom_bar(stat="identity", position=position_dodge(), color = "black", width = 0.9) +
geom_text(aes(label=Freq), vjust=-0.5, size=3.5)+
annotate("segment", x = mean, xend = mean, y = 0, yend = max(tab$Freq) + 0.5, colour = "black", size=1) +
#geom_segment(aes(x=mean, xend=mean, y=0, yend=max(tab$Freq) + 0.5)) +
geom_label(aes(x=mean, y=max(tab$Freq) + 0.5, label = paste0("Média = ", mean))) +
annotate("text", x = mode, y = 0.5, label = "Moda" , color="black", size=4 , angle=0) +
#geom_label(aes(x=mode, y=0, label = paste0("Moda"))) +
theme_classic() +
scale_fill_manual(values = c("steelblue", "red"),
labels = c("", "Moda")) +
scale_x_continuous(breaks = round(seq(min(tab$elementos), max(tab$elementos), by = 1))) +
theme(legend.position="none") +
theme(legend.title = element_blank()) +
labs(x=" ", y = " ")
})
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
elementos
sample(elementos, 3)
sample(elementos, 3)
sample(elementos, 3)
sample(elementos, 3)
sample(elementos, 3)
?sample
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
(length(elementos)%%2 == 0)
?quantile()
ex <- c(2, 3, 5, 7, 8, 10, 11, 12, 15, 67)
quantile(ex)
q <- quantile(ex)
q[1]
q[2]
q[1,1]
typeof(q)
q[1] + q[1]
q <- as.vector(quantile(ex))
q
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/garu')
runApp('Documents/BIG/v2')
shiny::runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
shiny::runApp('Documents/BIG/v2')
shiny::runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
shiny::runApp('Documents/BIG/v2')
shiny::runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
colnames(data)
as.data.frame(cbind(c("[1, 2]", "[3, 4]"), c("Início", "Fim"
)))
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?navbarMenu
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?tabPanel
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?updateNavbarPage
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
runApp('Documents/BIG/v2')
?numericInput
x <- seq(-4, 4, length = 300)
y <- dnorm(x)
head(y)
cbind(x, y)
runApp('Documents/BIG/v2')
?dnorm
dnorm(1.64)
pnorm(1.64)
pnorm(1.65)
qnorm(0.95)
head(data)
ggplot(data, x=Peso) +
geom_area(stat=..density..)
ggplot(data, x=Peso) +
geom_area(aes(stat=..density..))
ggplot(data, x=Peso) +
geom_area(aes(y=..density..))
ggplot(data, x=Peso) +
geom_density(stat="density")
ggplot(data, aes(x=Peso)) +
geom_density()
metrics <- read.csv("data/weight-height.csv")
setwd("/home/joao/Documents/BIG/v2/")
metrics <- read.csv("data/weight-height.csv")
ggplot(data=metrics, aes(x=Weight)) +
geom_density()
?geom_density
ggplot(data=metrics, aes(x=Weight)) +
?geom_density
ggplot(data=metrics, aes(x=Weight)) +
geom_density(aes(group=Gender))
ggplot(data=metrics, aes(x=Weight)) +
geom_density(aes(group=Gender, color=Gender))
mean(metrics[metrics$Gender == "Male"]$Height)
mean(metrics$Height[metrics$Gender == "Male"])
mean(metrics$Height[metrics$Gender == "Female"])
sd(metrics$Height[metrics$Gender == "Female"])
sd(metrics$Height[metrics$Gender == "Male"])
library(cowplot)
ggplot(data=metrics, aes(x=Weight)) +
stat_function(fun=dnorm, n=101, args = list(sd=2.863362, mean=69.02635), color="green") +
geom_density(aes(group=Gender, color=Gender))
ggplot(data=metrics, aes(x=Weight)) +
stat_function(fun=dnorm, n=101, args = list(sd=2.863362, mean=69.02635), color="green") +
geom_density(aes(group=Gender, color=Gender))
ggplot(data=metrics, aes(x=Height)) +
stat_function(fun=dnorm, n=101, args = list(sd=2.863362, mean=69.02635), color="green") +
geom_density(aes(group=Gender, color=Gender))
qnorm(0.05)
runApp()
runApp()
runApp()
runApp()
x <- c(seq(1, 20, length=10), seq(100, 120, length=10))
x
qnorm(0.05)
qnorm(1-0/05)
qnorm(1-0.05)
?dnomr
?dnorm
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?stat_function
runApp()
data.frame(1, 2)
runApp()
data.frame(0.5, dnorm(0.5))
runApp()
runApp()
qnorm(314, 300, 9.48)
?qnorm
qnorm(314, mean=300, sd=9.48)
qnorm(300, mean=300, sd=9.48)
qnorm(300, 300, 9)
qnorm(314, mean=300, sd=9.48, lower.tail = TRUE)
qnorm(1.64, 0, 1)
qnorm(1.64)
qnorm(-1.64)
dnorm(1.64)
pnorm(1.64)
qnorm(0.9494)
pnorm(314, 300, 9.48)
pnorm(314, 300, 9.48, lower.tail = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rnorm(10)
rnorm(12, mean=9, sd=2.2)
rnorm(12, mean=10, sd=2.2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- rnorm(12, 10, 2.2)
x
x <- as.data.frame(x)
x
ggplot(data=x, aes(x=x)) +
geom_density()
ggplot(data=x, aes(x=x)) +
geom_density() +
scale_x_continuous(limits = c(10 - 6.6, 10 + 6.6))
ggplot(data=x, aes(x=x)) +
geom_density() +
scale_x_continuous(limits = c(10 - 8.8, 10 +8.8))
ggplot(data=x, aes(x=x)) +
geom_density() +
scale_x_continuous(limits = c(min(x), max(x)))
ggplot() +
geom_density(data=x, aes(x=x))
seq(12, 10)
rep(12, 10)
runApp()
p1 <- rnorm(12, 10, 2.2)
p2 <- rnorm(12, 9, 2.2)
p <- as.data.frame(cbind(c(p1, p2), c(rep("População 1", n), rep("População 2", n))))
c(p1, p2)
c(rep("População 1", n), rep("População 2", n))
c(rep("População 1", 12), rep("População 2", 12))
p <- as.data.frame(cbind(c(p1, p2), c(rep("População 1", 12), rep("População 2", 12))))
p
ggplot(data=p, aes(x=V1)) +
geom_density(aes(group = V2, color = V2))
is.factor(p$V1)
p$V1
as.numeric(p$V1)
as.numeric(as.character(p$V1))
runApp()
?scale_fill_discrete
?geom_density
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dt
p1
p2
p1 - p2
D <- p1 - p2
D
mean(D)
var(D)
mean(D)/(sd(D)/sqrt(12))
dt(1.342037, df = 11)
dt(-1.342037, df=11)
runApp()
runApp()
runApp()
qt(0.025, df=11)
1t(0.975, df=11)
qt(0.975, df=11)
dt(-1, df=11)
dt(1, df=11)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot() +
stat_function(fun=dt, n=101, args=list(df=11))
runApp()
runApp()
runApp()
runApp()
runApp()
qt(-1.72)
qt(-1.72, 11)
dt(-1.72, 11)
dt(1.72, 11)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
library(rs)
library(rsconnect)
deployApp(appName = "garu-estatistica")
runApp()
install.packages("shinyMatrix")
devtools::install_github("INWTlab/shinyMatrix")
devtools::install_github("INWTlab/shiny-matrix")
library(shiny)
library("shiny", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("httpub")
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("httpuv")
detach("package:httpuv", unload=TRUE)
